# RGB 이미지 HSV로 변환 및 임계값 설정
def red_hsv(image):  
	image_hsv = cvtColor(image, COLOR_BGR2HSV)  
	thresh_low = (160, 100, 70)  
	thresh_high = (255, 255, 255)  
	thresh_img = inRange(image_hsv, thresh_low, thresh_high)  
	return th_img

# blue color 중점 찾기
bi_blue = blue_hsv(image)
	value_th = np.where(bi_blue[:, :] == 255)   #검출된 파란색의 좌표들을 불러온다. 

	min_x1 = np.min(value_th[1])
	max_x1 = np.max(value_th[1])
	min_y1 = np.min(value_th[0])
	max_y1 = np.max(value_th[0])

	center_x1 = int((min_x1 + max_x1) / 2)
	center_y1 = int((min_y1 + max_y1) / 2)

  center_min_x = 640
  center_max_x = 0
  center_min_y = 480
  center_max_y = 0

  #사각형의 중점에서 이동하면서 원의 경계에 도달하면 정지
  for i in range(center_x1, max_x1):
  if bi_blue[center_y1][i] == 255 and i > center_max_x:
      center_max_x = i
      break              

  

  center_x2 = int((center_min_x + center_max_x) / 2)
  center_y2 = int((center_min_y + center_max_y) / 2)

  # 표식이 보일 때까지 전진
if max_x1_red - min_x1_red < 25:
	sleep(2)
	drone.sendControlPosition16(1, 0, 0, 5, 0, 0)
	red_find = 1

  # 표식이 나타났을 때
else:
	sleep(2)
	drone.sendControlPosition16(0, 0, 0, 0, 90, 20)
	sleep(4)
	drone.sendControlPosition16(10, 0, 0, 6, 0, 0)
	sleep(4)
	drone.sendControlPosition16(0, 0, 2, 5, 0, 0)
	sleep(2)

#착륙
def blue_hsv(image):
  image_hsv = cvtColor(image, COLOR_BGR2HSV)
  thresh_low = (90, 80, 70)
  thresh_high = (120, 255, 255)
  thresh_img = inRange(image_hsv, thresh_low, thresh_high)
  return thresh_img
